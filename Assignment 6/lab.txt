Lab 6
Christopher Bachelor

To start off, I ran the command 'sort --version' to make sure I am
using a coreutils newer than 8.6. Initially I realized that my version
was coreutils 8.26, which seemed older than 8.6, however since it was
Copyrighted in 2016 I checked the version page of coreutils and found
that 8.26 is newer than 8.6.

Now I wanted to create a file containing 10,000,000 random
single-precision floating point numbers, one per line with no line
space. I used 'od' to dump a bunch of random floating point numbers
from /dev/urandom, with the following flags:

-t fF : outputs only floating point numbers

-w4 : Limits each line to 4 bytes max, which is the size of a float,
 so that each float is on its own line.

--read-bytes=40000000 : This limits the output size to 10000000
  floating point values, since each float is 4 bytes.

Then I took the output of the 'od' and piped it into two seds, first
which removed the numbering scheme in the beginning of each od output,
and another that removes all spaces, just to be sure. The final
command I used was as such:

od -t fF -w4 --read-bytes=40000000 /dev/urandom | sed 's/^.* //g' |
sed 's/ //g' > op

Then I timed how long sort would sort this large file of floats, when
outputted to /dev/null. The '-p' flag in time outputs in a general
format, while the '-g' format sorts the file based on numeric value.

time -p sort -g op > /dev/null real 20.77 user 112.31 sys 0.42

Then I ran the sort with the "--parallel=N" option, where the number
of N indicated how many threads parallel used. I tested it for
N=1,2,4, and 8:

time -p sort -g --parallel=1 op > /dev/null real 104.24 user 104.05
sys 0.17

time -p sort -g --parallel=2 op > /dev/null real 54.34 user 103.00 sys
0.30

time -p sort -g --parallel=4 op > /dev/null real 32.36 user 108.32 sys
0.38

time -p sort -g --parallel=8 op > /dev/null real 20.81 user 113.21 sys
0.47

From the outputs above, you can see that parellel with 8 threads has
similar times with the default sort. This indicates that default sort
automatically uses 8 threads to sort, which may be the default set for
SEASNET machines, and number of threads may increase depending on the
machine. The user times between the processes didn't have much
difference, however the system time increased as threads increased,
which makes sense because sort called in each thread is using system
calls on its own.


